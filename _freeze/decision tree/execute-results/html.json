{
  "hash": "f16059642c98adf3125eb5d28f69ce06",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Play Tennis \ndescription: Normalisasi data play tennis\ndate: 10/31/2024\nauthor: M. Ilham Saputra\ncategories: [play, tenis]\ndraft: false \nshow: true\nfreeze: true\n---\n\n::: {#b93f775b .cell execution_count=1}\n``` {.python .cell-code}\n# numpy and pandas initialization\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#d23d6a19 .cell execution_count=2}\n``` {.python .cell-code}\n#Loading the PlayTennis data\nplaytennis = pd.read_csv(\"playtennis.csv\")\n```\n:::\n\n\n::: {#d4e092ae .cell execution_count=3}\n``` {.python .cell-code}\nplaytennis.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>outlook</th>\n      <th>temp</th>\n      <th>humidity</th>\n      <th>windy</th>\n      <th>play</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>sunny</td>\n      <td>hot</td>\n      <td>high</td>\n      <td>False</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>sunny</td>\n      <td>hot</td>\n      <td>high</td>\n      <td>True</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>overcast</td>\n      <td>hot</td>\n      <td>high</td>\n      <td>False</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>rainy</td>\n      <td>mild</td>\n      <td>high</td>\n      <td>False</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>rainy</td>\n      <td>cool</td>\n      <td>normal</td>\n      <td>False</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#47cc908a .cell execution_count=4}\n``` {.python .cell-code}\nplaytennis['humidity'].hist()\n```\n\n::: {.cell-output .cell-output-display}\n![](decision tree_files/figure-html/cell-5-output-1.png){width=558 height=411}\n:::\n:::\n\n\n::: {#5db07924 .cell execution_count=5}\n``` {.python .cell-code}\nplaytennis['outlook'].hist()\n```\n\n::: {.cell-output .cell-output-display}\n![](decision tree_files/figure-html/cell-6-output-1.png){width=558 height=411}\n:::\n:::\n\n\n::: {#174d5967 .cell execution_count=6}\n``` {.python .cell-code}\nplaytennis['play'].hist()\n```\n\n::: {.cell-output .cell-output-display}\n![](decision tree_files/figure-html/cell-7-output-1.png){width=558 height=411}\n:::\n:::\n\n\n::: {#e74d7616 .cell execution_count=7}\n``` {.python .cell-code}\n #get unique labels\nprint(playtennis['outlook'].unique())\nprint(playtennis['temp'].unique())\nprint(playtennis['humidity'].unique())\nprint(playtennis['windy'].unique())\nprint(playtennis['play'].unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['sunny' 'overcast' 'rainy']\n['hot' 'mild' 'cool']\n['high' 'normal']\n[False  True]\n['no' 'yes']\n```\n:::\n:::\n\n\n::: {#7a27ecef .cell execution_count=8}\n``` {.python .cell-code}\n#using label encoder\nfrom sklearn.preprocessing import LabelEncoder\nLe = LabelEncoder() #each categorical value is assigned a numerical value(0,1,2...)\nplaytennis['outlook'] = Le.fit_transform(playtennis['outlook'])\nplaytennis['temp'] = Le.fit_transform(playtennis['temp'])\nplaytennis['humidity'] = Le.fit_transform(playtennis['humidity'])\nplaytennis['windy'] = Le.fit_transform(playtennis['windy'])\nplaytennis['play'] = Le.fit_transform(playtennis['play'])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/usr/lib/python3/dist-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.17.3 and <1.25.0 is required for this version of SciPy (detected version 1.26.4\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n```\n:::\n:::\n\n\n::: {#8af11d05 .cell execution_count=9}\n``` {.python .cell-code}\n#After applying label encoding, each unique column labels is converted into unique numerical values between 0 to number of labels in each column\n#each value represent a unique label e.g in \"outlook\" column 2 is the label for \"sunny\", 0 is the label for \"overcast\", and 1 is a label for \"rainy\".\nprint(playtennis['outlook'].unique())\nprint(playtennis['temp'].unique())\nprint(playtennis['humidity'].unique())\nprint(playtennis['windy'].unique())\nprint(playtennis['play'].unique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 0 1]\n[1 2 0]\n[0 1]\n[0 1]\n[0 1]\n```\n:::\n:::\n\n\n::: {#ca28c13d .cell execution_count=10}\n``` {.python .cell-code}\nplaytennis\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>outlook</th>\n      <th>temp</th>\n      <th>humidity</th>\n      <th>windy</th>\n      <th>play</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f58cee09 .cell execution_count=11}\n``` {.python .cell-code}\ny = playtennis['play'] #decision column\nx = playtennis.drop(['play'],axis=1) #dropping\n```\n:::\n\n\n::: {#c059fe06 .cell execution_count=12}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test  = train_test_split(x,y,test_size = 0.2) #split the data\n```\n:::\n\n\n::: {#ed117d75 .cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n```\n:::\n\n\n::: {#44a21c7a .cell execution_count=14}\n``` {.python .cell-code}\n# building decision tree\nclf=DecisionTreeClassifier()\nclf=clf.fit(x_train,y_train)\ny_pred=clf.predict(x_test)\n```\n:::\n\n\n::: {#0ec432e9 .cell execution_count=15}\n``` {.python .cell-code}\nprint(\"Accuracy:\", metrics.accuracy_score(y_test,y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.6666666666666666\n```\n:::\n:::\n\n\n::: {#a3587620 .cell execution_count=16}\n``` {.python .cell-code}\ndef predict_play():\n    Le = LabelEncoder()\n\n    outlook = \"sunny\"\n    temp = \"cool\"\n    humidity = \"normal\"\n    windy = \"True\"\n\n    windy = True if windy.lower() == 'true' else False\n\n    user_input = pd.DataFrame({'outlook': [outlook],\n                               'temp' : [temp],\n                               'humidity': [humidity],\n                               'windy' : [windy]})\n    for column in x.columns : \n        user_input[column] = Le.fit_transform(user_input[column])\n    prediction = clf.predict(user_input)\n    prediction = \"yes\" if prediction[0] == 1 else \"no\"\n    print(\"Based on the conditiond, should you play tennis?\", prediction)\npredict_play()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBased on the conditiond, should you play tennis? yes\n```\n:::\n:::\n\n\n::: {#e08be76d .cell execution_count=17}\n``` {.python .cell-code}\n!pip install dtreeviz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDefaulting to user installation because normal site-packages is not writeable\r\nRequirement already satisfied: dtreeviz in /home/ilham/.local/lib/python3.10/site-packages (2.2.2)\r\nRequirement already satisfied: graphviz>=0.9 in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (0.20.3)\r\nRequirement already satisfied: pandas in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (2.2.2)\r\nRequirement already satisfied: scikit-learn in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (1.5.1)\r\nRequirement already satisfied: colour in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (0.1.5)\r\nRequirement already satisfied: numpy in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (1.26.4)\r\nRequirement already satisfied: pytest in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (8.3.3)\r\nRequirement already satisfied: matplotlib in /home/ilham/.local/lib/python3.10/site-packages (from dtreeviz) (3.9.2)\r\nRequirement already satisfied: fonttools>=4.22.0 in /usr/lib/python3/dist-packages (from matplotlib->dtreeviz) (4.29.1)\r\nRequirement already satisfied: contourpy>=1.0.1 in /home/ilham/.local/lib/python3.10/site-packages (from matplotlib->dtreeviz) (1.3.0)\r\nRequirement already satisfied: pillow>=8 in /usr/lib/python3/dist-packages (from matplotlib->dtreeviz) (9.0.1)\r\nRequirement already satisfied: packaging>=20.0 in /home/ilham/.local/lib/python3.10/site-packages (from matplotlib->dtreeviz) (24.0)\r\nRequirement already satisfied: kiwisolver>=1.3.1 in /usr/lib/python3/dist-packages (from matplotlib->dtreeviz) (1.3.2)\r\nRequirement already satisfied: python-dateutil>=2.7 in /home/ilham/.local/lib/python3.10/site-packages (from matplotlib->dtreeviz) (2.9.0.post0)\r\nRequirement already satisfied: cycler>=0.10 in /usr/lib/python3/dist-packages (from matplotlib->dtreeviz) (0.11.0)\r\nRequirement already satisfied: pyparsing>=2.3.1 in /usr/lib/python3/dist-packages (from matplotlib->dtreeviz) (2.4.7)\r\nRequirement already satisfied: tzdata>=2022.7 in /home/ilham/.local/lib/python3.10/site-packages (from pandas->dtreeviz) (2024.1)\r\nRequirement already satisfied: pytz>=2020.1 in /usr/lib/python3/dist-packages (from pandas->dtreeviz) (2022.1)\r\nRequirement already satisfied: pluggy<2,>=1.5 in /home/ilham/.local/lib/python3.10/site-packages (from pytest->dtreeviz) (1.5.0)\r\nRequirement already satisfied: iniconfig in /home/ilham/.local/lib/python3.10/site-packages (from pytest->dtreeviz) (2.0.0)\r\nRequirement already satisfied: tomli>=1 in /home/ilham/.local/lib/python3.10/site-packages (from pytest->dtreeviz) (2.0.1)\r\nRequirement already satisfied: exceptiongroup>=1.0.0rc8 in /home/ilham/.local/lib/python3.10/site-packages (from pytest->dtreeviz) (1.2.1)\r\nRequirement already satisfied: scipy>=1.6.0 in /usr/lib/python3/dist-packages (from scikit-learn->dtreeviz) (1.8.0)\r\nRequirement already satisfied: threadpoolctl>=3.1.0 in /home/ilham/.local/lib/python3.10/site-packages (from scikit-learn->dtreeviz) (3.5.0)\r\nRequirement already satisfied: joblib>=1.2.0 in /home/ilham/.local/lib/python3.10/site-packages (from scikit-learn->dtreeviz) (1.4.2)\r\nRequirement already satisfied: six>=1.5 in /usr/lib/python3/dist-packages (from python-dateutil>=2.7->matplotlib->dtreeviz) (1.16.0)\r\n```\n:::\n:::\n\n\n::: {#8838fc20 .cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn import tree\n```\n:::\n\n\n::: {#a5b133e6 .cell execution_count=19}\n``` {.python .cell-code}\nfrom dtreeviz.trees import *\n```\n:::\n\n\n::: {#02a74cbe .cell execution_count=20}\n``` {.python .cell-code}\ntext_representation = tree.export_text(clf)\nprint(text_representation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n|--- feature_3 <= 0.50\n|   |--- feature_0 <= 1.50\n|   |   |--- class: 1\n|   |--- feature_0 >  1.50\n|   |   |--- feature_2 <= 0.50\n|   |   |   |--- class: 0\n|   |   |--- feature_2 >  0.50\n|   |   |   |--- class: 1\n|--- feature_3 >  0.50\n|   |--- feature_0 <= 0.50\n|   |   |--- class: 1\n|   |--- feature_0 >  0.50\n|   |   |--- class: 0\n\n```\n:::\n:::\n\n\n::: {#4d7903a7 .cell execution_count=21}\n``` {.python .cell-code}\nfig = plt.figure(figsize=(7,8))\ntree.plot_tree(clf, feature_names=x.columns, class_names=['yes', 'no'], filled=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n[Text(0.5, 0.875, 'windy <= 0.5\\ngini = 0.496\\nsamples = 11\\nvalue = [5, 6]\\nclass = no'),\n Text(0.25, 0.625, 'outlook <= 1.5\\ngini = 0.408\\nsamples = 7\\nvalue = [2, 5]\\nclass = no'),\n Text(0.375, 0.75, 'True  '),\n Text(0.125, 0.375, 'gini = 0.0\\nsamples = 4\\nvalue = [0, 4]\\nclass = no'),\n Text(0.375, 0.375, 'humidity <= 0.5\\ngini = 0.444\\nsamples = 3\\nvalue = [2, 1]\\nclass = yes'),\n Text(0.25, 0.125, 'gini = 0.0\\nsamples = 2\\nvalue = [2, 0]\\nclass = yes'),\n Text(0.5, 0.125, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]\\nclass = no'),\n Text(0.75, 0.625, 'outlook <= 0.5\\ngini = 0.375\\nsamples = 4\\nvalue = [3, 1]\\nclass = yes'),\n Text(0.625, 0.75, '  False'),\n Text(0.625, 0.375, 'gini = 0.0\\nsamples = 1\\nvalue = [0, 1]\\nclass = no'),\n Text(0.875, 0.375, 'gini = 0.0\\nsamples = 3\\nvalue = [3, 0]\\nclass = yes')]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](decision tree_files/figure-html/cell-22-output-2.png){width=540 height=611}\n:::\n:::\n\n\n",
    "supporting": [
      "decision tree_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}